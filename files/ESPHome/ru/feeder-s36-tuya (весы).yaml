#####################################################################################
##################################### Переменные ####################################
substitutions:
  board_name: Scales for a cat
  node_name: scales-cat-bowl

#####################################################################################
################################ Основная конфигурация ##############################
esphome:
  name: ${node_name}
  comment: WeMos D1 Scales for a cat bowl

#####################################################################################
###################################### Платформа ####################################
esp8266:
  board: d1_mini
  framework:
    version: recommended
  #Сохраняем предустановленные настройки. После перезагрузки настройки не сбрасываются  
  restore_from_flash: true

#Сброс данных на флэш-накопитель для уменьшения износа флеш-накопителя
preferences:
  flash_write_interval: 1min

#####################################################################################
################################ Wi-Fi и точка доступа ##############################
#Учетные данные Wi-Fi для подключения платы к домашней сети
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: off
  reboot_timeout: 5min

#Если не будет связи с WiFi, то поднимется точка доступа
  ap:
    ssid: ESP Feeder S36 Tuya
    password: !secret ap_esp_password
    ap_timeout: 1 min
    manual_ip:
      static_ip: 192.168.4.1
      gateway: 192.168.4.1
      subnet: 255.255.255.0

#Компонент mdns заставляет узел объявлять о себе в локальной сети, используя протокол многоадресной рассылки DNS (mDNS), по умолчанию для mDNS disabled: false
mdns:
  disabled: false

#Компонент captive portal в ESPHome является резервным механизмом на случай сбоя подключения к настроенному Wi-Fi
captive_portal:

#Веб сервер
web_server:
  port: 80

#Журналирование
logger:
  level: ERROR #DEBUG
  baud_rate: 0

#Enable Home Assistant API
#Шифрование выключил
api:

#Обновление по воздуху (OTA)
ota:
  password: "esphome"


#####################################################################################
################################## Сенсор ###########################################
sensor:
#Сенсор общего веса
  - platform: hx711
    name: "Weight"
    icon: mdi:scale
    id: idWeight
    dout_pin: D4 #DT
    clk_pin: D3 #SCK
    gain: 64
    update_interval: 1s
    unit_of_measurement: g
    accuracy_decimals: 0
    device_class: weight
    state_class: measurement
    entity_category: diagnostic
    internal: False
    filters:
      - calibrate_linear:
          - -91277 -> 0 #При необходимости эти значения можно изменить для калибровки весов
          - -165317 -> 500 #При необходимости эти значения можно изменить для калибровки весов
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
      #Если миска извлечена, то вес корма будет 0
      - lambda: !lambda |-
          if ( x < (id(idSetWeightBowl).state - 30)) return 0;
          return x;
    on_value:
      then:
      - if:
          condition:
              #Если вес миски ниже указанного, значит миски нет
              - lambda: 'return id(idWeight).state < 1;'
          then:
              #Опубликовать статус OFF
              - binary_sensor.template.publish:
                  id: idBowl
                  state: OFF
              - globals.set:
                  id: idWeightBowlGlobal
                  value: '10'
      - if:
          condition:
              #Если вес миски выше указанного, значит миска на месте
              - lambda: 'return id(idWeight).state > 1;' 
          then:
              #Опубликовать статус ON
              - binary_sensor.template.publish:
                  id: idBowl
                  state: ON


#Сенсор веса корма в миске
  - platform: template
    name: "Weight Food"
    icon: mdi:weight-gram
    id: idWeightFood
    update_interval: 1s
    unit_of_measurement: g
    accuracy_decimals: 0
    device_class: weight
    state_class: measurement
    lambda: 'return id(idWeight).state - id(idSetWeightBowl).state;' #Вычитаем вес миски и получаем вес корма
    filters:
        #Если миска извлечена, то вес корма будет 0
        - lambda: !lambda |-
            if (x < 0) return 0;
            return x;
    on_value:
      then:
      - if:
          condition:
              #Если вес миски ниже указанного, значит корма в миске нет
              - lambda: 'return id(idWeightFood).state < 1;'
          then:
              #Опубликовать статус OFF
              - binary_sensor.template.publish:
                  id: idFood
                  state: OFF
      - if:
          condition:
              #Если вес миски выше указанного, значит корм в миске есть
              - lambda: 'return id(idWeightFood).state > 1;'
          then:
              #Опубликовать статус ON
              - binary_sensor.template.publish:
                  id: idFood
                  state: ON

#Сенсор уровня сигнала WiFi
  - platform: wifi_signal
    name: "RSSI WiFi"
    icon: mdi:wifi
    update_interval: 60s

#Скрытый сенсор безотказной работы в секундах
  - platform: uptime
    name: "Uptime sec"
    icon: mdi:clock-outline
    id: uptime_sensor
    internal: True #Скрыть - true \показать - false
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_esp
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (String(minutes) + "m")
              ).c_str();


#####################################################################################
################################## Бинарный сенсор ##################################
binary_sensor:
#Наличие миски
  - platform: template
    name: "Bowl"
    icon: mdi:bowl
    id: idBowl
    internal: false #Скрыть - true \показать - false
    on_state:
      then:
      - if:
          condition:
              #Если миска на месте и общий вес меньше или больше не более 7 граммов, то вес миски будет обнулен
              - lambda: 'return id(idBowl).state == true && id(idWeight).state > id(idSetWeightBowl).state - 7 && id(idWeight).state < id(idSetWeightBowl).state + 7;'
          then:
              - delay: 5s
              - number.set:
                  id: idSetWeightBowl
                  value: !lambda |-
                    return round((id(idWeight).state)+1);

#Наличие корма в миске
  - platform: template
    name: "Food"
    icon: mdi:bowl
    id: idFood
    internal: false #Скрыть - true \показать - false


#####################################################################################
################################### Текстовый сенсор ################################
text_sensor:
#Сенсор IP
  - platform: wifi_info
    ip_address:
      name: IP
      icon: mdi:ip-network

#ESPHome Version
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

#Время безотказной работы
  - platform: template
    name: "Uptime"
    icon: mdi:clock-start
    id: uptime_esp
    entity_category: diagnostic

  - platform: template
    name: "Time"
    icon: mdi:clock-digital
    id: idTime
    update_interval: 10s
    lambda: |-
      auto time_text = id(homeassistant_time).now().strftime("%H:%M:%S / %d-%m-%Y");
      return { time_text };

#####################################################################################
####################################### Кнопка ######################################
button:
#Перезагрузка
  - platform: restart
    name: "Restart"
    icon: mdi:restart

#Убрать вес стальной миски
  - platform: template
    name: "Remove Weight Bowl"
    id: idRemoveWeightBowl
    icon: mdi:scale-balance
    on_press:
      then:
      - if:
          condition:
              #Если миска на месте и вес отличается от указанного веса стальной миски, то вес миски будет обнулен и будет отображаться только вес корма
              - lambda: 'return id(idBowl).state == true and id(idWeight).state != id(idSetWeightBowl).state;'
          then:
              - number.set:
                  id: idSetWeightBowl
                  value: !lambda |-
                    return round((id(idWeight).state)+1);


#####################################################################################
####################################### Число #######################################
number:
#Выставляем вес миски чтобы не отображать вес, а отображать вес корма
  - platform: template
    name: "Set Weight For Bowl"
    icon: mdi:bowl
    id: idSetWeightBowl
    min_value: 0
    max_value: 500
    step: 1
    mode: box #slider/box
    optimistic: true
    restore_value: true


#####################################################################################
####################################### Время #######################################
time:
  - platform: homeassistant
    id: homeassistant_time
