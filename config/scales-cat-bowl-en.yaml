substitutions:
  board_name: Scales for a cat
  node_name: scales-cat-bowl

esphome:
  name: ${node_name}
  comment: WeMos D1 Scales for a cat bowl

esp8266:
  board: d1_mini
  framework:
    version: recommended

#Wi-Fi credentials for connecting the board to the home network
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: off
  reboot_timeout: 5min

#If there is no connection with WiFi, then the access point will rise
  ap:
    ssid: ESP Cat bowl Hotspot
    password: !secret ap_esp_password

#The captive portal component in ESPHome is a backup mechanism in case of a connection failure to the configured Wi-Fi
captive_portal:

#Web server
web_server:
  port: 80

#Logging
logger:
  level: ERROR

#Enable OTA
ota:
  password: "esphome"

#Enable Home Assistant API
api:

#####################################################################################
################################## Sensor ###########################################
sensor:
#Total weight sensor
  - platform: hx711
    name: "${node_name} Weight"
    icon: mdi:scale
    id: idWeight
    dout_pin: D7 # DT
    clk_pin: D6  # SCK
    gain: 64
    update_interval: 1s
    unit_of_measurement: g
    accuracy_decimals: 0
    device_class: weight
    state_class: measurement
    entity_category: diagnostic
    internal: False
    filters:
      - calibrate_linear:
          - 56194 -> 0
          - 127044 -> 500
      - median:
          window_size: 7
          send_every: 5
          send_first_at: 4
      #If the bowl is removed, the feed weight will be 0
      - lambda: !lambda |-
          if (x < 0) return 0;
          return x;
    on_value:
      then:
      - if:
          condition:
              #If the weight of the bowl is below 20, then there is no bowl
              - lambda: 'return id(idWeight).state < 20;'
          then:
              #Publish the OFF status
              - binary_sensor.template.publish:
                  id: idBowl
                  state: OFF
      - if:
          condition:
              #If the weight of the bowl is above 60, then the bowl is in place
              - lambda: 'return id(idWeight).state > 60;'
          then:
              #Publish the status ON
              - binary_sensor.template.publish:
                  id: idBowl
                  state: ON

#Feed weight sensor in a bowl
  - platform: template
    name: "${node_name} Weight Food"
    id: idWeightFood
    update_interval: 1s
    unit_of_measurement: g
    accuracy_decimals: 0
    device_class: weight
    state_class: measurement
    icon: mdi:weight-gram
    lambda: 'return id(idWeight).state - id(idSetWeightBowl).state;' #Subtract the weight of the bowl and get the weight of the feed
    filters:
        #If the bowl is removed, the feed weight will be 0
        - lambda: !lambda |-
            if (x < 0) return 0;
            return x;
        #We use the median filter
        - median:
            window_size: 7
            send_every: 5
            send_first_at: 4
    on_value:
      then:
      - if:
          condition:
              #If the weight of the bowl is below 1, then there is no food in the bowl
              - lambda: 'return id(idWeightFood).state < 1;'
          then:
              #Publish the OFF status
              - binary_sensor.template.publish:
                  id: idFood
                  state: OFF
      - if:
          condition:
              #If the weight of the bowl is higher than 1, then there is food in the bowl
              - lambda: 'return id(idWeightFood).state > 1;'
          then:
              #Publish the status ON
              - binary_sensor.template.publish:
                  id: idFood
                  state: ON

#WiFi Signal Strength Sensor
  - platform: wifi_signal
    name: ${node_name} RSSI WiFi
    icon: mdi:wifi
    update_interval: 60s

#Hidden sensor uptime in seconds
  - platform: uptime
    name: "${node_name} Uptime sec"
    icon: mdi:clock-outline
    id: uptime_sensor
    internal: True #Hide - true \show - false
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_esp
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (String(minutes) + "m")
              ).c_str();


#####################################################################################
################################### Binary sensor ###################################
binary_sensor:
#Availability of a bowl
  - platform: template
    name: "${node_name} Bowl"
    icon: mdi:bowl
    id: idBowl
    internal: false #Hide - true \show - false

#The presence of food in the bowl
  - platform: template
    name: "${node_name} Food"
    icon: mdi:bowl
    id: idFood
    internal: false #Hide - true \show - false


#####################################################################################
##################################### Text Sensor ###################################
#Show IP address
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${node_name} IP"
#    ssid:
#      name: ${board_name} SSID
#    bssid:
#      name: ${board_name} BSSID
#    mac_address:
#      name: ${board_name} Mac
#    scan_results:
#      name: ${board_name} Latest_Scan_Results

#Uptime
  - platform: template
    name: "${node_name} Uptime ESP"
    id: uptime_esp
    icon: mdi:clock-start
    entity_category: diagnostic


#####################################################################################
####################################### Number ######################################
#Specify the weight for the bowl
number:
  - platform: template
    name: "${node_name} Set weight for bowl"
    id: idSetWeightBowl
    min_value: 70
    max_value: 100
    step: 1
    mode: slider #slider/box
    optimistic: true
    restore_value: true


#####################################################################################
####################################### Button ######################################
button:
  - platform: restart
    name: "${node_name} Restart ESP"
    icon: mdi:restart


#####################################################################################
######################################## Time #######################################
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Moscow